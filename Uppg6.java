import java.util.Random;
import java.util.Scanner;

/**
 * @author Elin Hjelmestam
 *
 * This code was generated 2020-09-20 and last updated 2020-09-21.
 *
 * The aim of this code is to test at which cut-off (0-30) the sorting
 * method is the most time efficient. An array of a size chosen by user is
 * randomly generated and then ran at all cut-offs. The code returns execution
 * time and belonging cut-off.
 *
 * The merge function was generated by Robert Sedgewick and Kevin Wayne in
 * the book Algorithms, fourth edition.
 *
 * This code was written as part of the examination of KTH course ID1020.
 */

public class Uppg6 {

    private Uppg6() { }

    public static void sort(Comparable[] input, int cutoff) {
        Comparable[] aux = new Comparable[input.length];
        sort(input, aux, 0, input.length - 1, cutoff);
        assert isSorted(input);
    }

    private static void sort(Comparable[] input, Comparable[] aux, int low, int high, int cutoff) {
        if(high <= low + cutoff){
            insertionSort(input);
            return;
        }
        //if(high <= low) return;
        int mid = low + (high - low) / 2;
        sort(input, aux, low, mid, cutoff);
        sort(input, aux, mid + 1, high, cutoff);
        merge(input, aux, low, mid, high);
    }

    public static void insertionSort(Comparable[] input){
        for (int a = 1; a < input.length; a++){
            for (int b = a; b > 0 && less(input[b], input[b - 1]); b--){
                swap(input, b, b-1);
                //print(input);
            }
            //assert isSorted(input);
        }
    }

    public static void swap(Comparable[] input, int a, int b){
        Comparable temp = input[a];        //comparable!!!!!
        input[a] = input[b];
        input[b] = temp;
    }

    private static void merge(Comparable[] input, Comparable[] aux, int low, int mid, int high) {
        assert isSorted(input, low, mid);
        assert isSorted(input, mid+1, high);

        for(int a = low; a <= high; a++) {
            aux[a] = input[a];
        }

        int i = low, j = mid+1;
        for (int a = low; a <= high; a++) {
            if      (i > mid)              input[a] = aux[j++];
            else if (j > high)             input[a] = aux[i++];
            else if (less(aux[j], aux[i])) input[a] = aux[j++];
            else                           input[a] = aux[i++];
        }

        assert isSorted(input, low, high);
    }

    private static boolean less(Comparable bla, Comparable hepp) {
        return bla.compareTo(hepp) < 0;
    }

    private static boolean isSorted(Comparable[] a) {
        return isSorted(a, 0, a.length - 1);
    }

    private static boolean isSorted(Comparable[] a, int lo, int hi) {
        for (int i = lo + 1; i <= hi; i++)
            if (less(a[i], a[i-1])) return false;
        return true;
    }

    public static void print(Comparable[] input){
        for(int a = 0; a < input.length; a++){
            System.out.print("[");
            System.out.printf(String.valueOf(input[a]));
            System.out.print("]");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        System.out.println("size of array");
        int size = in.nextInt();

        Integer[] input = new Integer[size];
        Random random = new Random();
        for (int a = 0; a < size; a++) {
            input[a] = (random.nextInt(100));
        }

        int cutoff = 0;
        for (cutoff = 0; cutoff < 30; cutoff++) {

            long startTIME = System.nanoTime();
            sort(input, cutoff);
            long endTIME = System.nanoTime();
            System.out.print("execution time ");
            System.out.print(endTIME - startTIME);
            System.out.print(" at cutoff " + cutoff);
            System.out.println();
        }
    }
}
